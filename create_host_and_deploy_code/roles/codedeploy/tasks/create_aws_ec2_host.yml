---
- name: "Setup requirements for using amazon sdk"
  pip:
    name:
      - boto
      - boto3

- name: "Setup the EC2 Key Pair"
  amazon.aws.ec2_key:
    name: "{{ aws_ec2_public_key_name }}"
    aws_access_key: "{{ lookup('env', '{{ aws_account_access_key_env_name }}') }}"
    aws_secret_key: "{{ lookup('env', '{{ aws_account_secret_key_env_name }}') }}"
    state: present
    region: "{{ aws_provider_region }}"
    key_material: "{{ lookup('file', '{{ aws_ec2_public_key_name }}') }}"
  register: valid_ec2_key

- name: Create the aws terraform file from template
  template:
    src: example_aws_ec2_build.tf.j2
    dest: roles/codedeploy/files/terraform_project/main.tf
    mode: "0755"

- name: Init terraform
  shell: terraform init
  args:
    chdir: roles/codedeploy/files/terraform_project/

- name: Deploy the aws ec2 instance
  check_mode: "{{ terraform_aws_dry_run }}"
  terraform:
    project_path: roles/codedeploy/files/terraform_project/
    state: "{{ terraform_project_state }}"
  register: terraform_output

- name: Test Host Deployment
  block:
    - name: Record the outputs of the terraform job
      set_fact:
        host_aws_id: "{{ terraform_output.outputs.instance_id.value }}"
        host_aws_public_ip: "{{ terraform_output.outputs.instance_public_ip.value }}"

    - name: Add host to inventory
      add_host:
        name: "{{ host_aws_public_ip }}"
        groups:
          - aws_hosts
        ansible_connection: ssh
        ansible_user: ec2-user
        ansible_ssh_private_key_file: "{{ aws_ec2_private_key_path }}"

    ### WIP: Need to confirm that connection to instance works after creation.
    # Then the provisioning role will work
    - name: Wait for system to be reachable
      delegate_to: "{{ host_aws_public_ip }}"
      wait_for_connection:
        timeout: 120
  when: terraform_project_state == "present"
  